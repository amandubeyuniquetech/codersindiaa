[
    {
        "id": 1,
        "question":"What is a tuple in Python?",
        
        "options": ["A collection of unordered elements",
        "A collection of ordered elements",
        "A single element",
        "A data type"
        ],
        "answer": "A collection of ordered elements",
        "discription":"A tuple in Python is a collection of ordered elements that are immutable, meaning once defined, the elements cannot be changed."
            

    },

    {
        "id": 2,
        "question":"How do you create an empty tuple in Python?",
        
        "options": ["empty = {}",
        "empty = ()",
        "empty = []",
        "empty = None"
        ],
        "answer": "empty = ()",
        "discription":"To create an empty tuple in Python, you use empty parentheses (). This indicates that the tuple contains no elements."
            

    },

    {
        "id": 3,
        "question":"Which of the following statements is used to add an element to a tuple?",
        
        "options": ["tuple.insert(0, element)",
        "Tuples are immutable, so elements cannot be added once a tuple is created",
        "tuple.add(element)",
        "tuple.extend(element)"
        ],
        "answer": "Tuples are immutable, so elements cannot be added once a tuple is created",
        "discription":"Tuples in Python are immutable, meaning their elements cannot be modified, added, or removed after creation. Therefore, none of the other options can be used to add an element to a tuple."
            

    },

    {
        "id": 4,
        "question":"What is the key difference between a tuple and a list in Python?",
        
        "options": ["Tuples are mutable, while lists are immutable.",
        "Lists are immutable, while tuples are mutable.",
        "Tuples are immutable, while lists are mutable.",
        "Lists can hold only integers, while tuples can hold any data type."
        ],
        "answer": "Tuples are immutable, while lists are mutable.",
        "discription":"The key difference is that tuples are immutable, meaning their contents cannot be changed after creation, while lists are mutable, allowing their contents to be modified."
            

    },

    {
        "id": 5,
        "question":"How do you check if an element is present in a tuple?",
        
        "options": ["tuple.contains(element)",
        "element in tuple",
        "tuple.has(element)",
        "element.exists(tuple)"
        ],
        "answer": "element in tuple",
        "discription":"To check if an element is present in a tuple, you use the in operator, which returns True if the element exists in the tuple and False if it does not."
            

    },

    {
        "id": 6,
        "question":"How do you concatenate two tuples in Python?",
        
        "options": ["tuple1.add(tuple2)",
        "tuple1 + tuple2",
        "tuple1.append(tuple2)",
        "tuple1.extend(tuple2)"
        ],
        "answer": "tuple1 + tuple2",
        "discription":"In Python, the + operator is used to concatenate two tuples, creating a new tuple that combines the elements of both."
            

    },

    {
        "id": 7,
        "question":"Which method is used to find the index of the first occurrence of a specified element in a tuple?",
        
        "options": ["find()",
        "index()",
        "search()",
        "locate()"
        ],
        "answer": "index()",
        "discription":"The index() method is used to find the index of the first occurrence of a specified element in a tuple. If the element is not found, it raises a ValueError."
            

    },

    {
        "id": 8,
        "question":"How do you create a tuple with elements from 1 to 5 in Python?",
        
        "options": ["tuple = (1, 2, 3, 4, 5)",
        "tuple = [1, 2, 3, 4, 5]",
        "tuple = {1, 2, 3, 4, 5}",
        "tuple = 1, 2, 3, 4, 5"
        ],
        "answer": "tuple = (1, 2, 3, 4, 5)",
        "discription":"creates a tuple with elements from 1 to 5. A tuple in Python is defined by enclosing elements in parentheses ()."
            

    },

    {
        "id": 9,
        "question":"Which method is used to remove the last element from a tuple?",
        
        "options": ["tuple.remove_last()",
        "tuple.pop()",
        "tuple.delete_last()",
        "Tuples are immutable, so elements cannot be removed"
        ],
        "answer": "Tuples are immutable, so elements cannot be removed",
        "discription":"Tuples in Python are immutable, meaning their elements cannot be changed or removed once they are created."
            

    },

    {
        "id": 10,
        "question":"",
        
        "options": ["tuple(list_name)",
        "list(tuple_name)",
        "convert(list_name)",
        "tuple.convert(list_name)"
        ],
        "answer": "tuple(list_name)",
        "discription":"To convert a list to a tuple in Python, you use the tuple() function, passing the list as an argument. This function creates a new tuple containing the elements of the list."
            

    },

    {
        "id": 11,
        "question":"What is the output of the following code?\nmy_tuple = (3, 1, 4, 1, 5, 9, 2)\nmy_tuple.sort()\nprint(my_tuple)",
        
        "options": ["(1, 1, 2, 3, 4, 5, 9)",
        "(1, 1, 2, 3, 4, 5, 9)",
        "(3, 1, 4, 1, 5, 9, 2)",
        "AttributeError: 'tuple' object has no attribute 'sort'"
        ],
        "answer": "AttributeError: 'tuple' object has no attribute 'sort'",
        "discription":"Tuples in Python are immutable, meaning their content cannot be changed. The sort() method is used to sort lists, not tuples. Attempting to use sort() on a tuple results in an AttributeError."
            

    },

    {
        "id": 12,
        "question":"How do you find the difference between two tuples in Python?",
        
        "options": ["tuple1 - tuple2",
        "tuple(set(tuple1) - set(tuple2))",
        "tuple1.difference(tuple2)",
        "set(tuple1) - set(tuple2)"
        ],
        "answer": "tuple(set(tuple1) - set(tuple2))",
        "discription":"To find the difference between two tuples, you first convert them to sets, use the set difference operation, and then convert the result back to a tuple."
            

    },

    {
        "id": 13,
        "question":"What will be the output of the following code snippet?\nt = (1, 2, 3)\nt[0] = 4\nprint(t)",
        
        "options": ["(4, 2, 3)",
        "(1, 2, 3)",
        "TypeError",
        "(4,2)"
        ],
        "answer": "TypeError",
        "discription":"Tuples are immutable, so you cannot change their elements after creation."
            

    },

    {
        "id": 14,
        "question":"What will t.count(2) return for t = (1, 2, 2, 3)?",
        
        "options": ["1",
        "2",
        "3",
        "4"
        ],
        "answer": "2",
        "discription":"The count() method returns the number of occurrences of the specified value."
            

    },

    {
        "id": 15,
        "question":"How can you unpack a tuple into separate variables?\nt = (1, 2, 3)\na, b, c = t",
        
        "options": ["a = t[0]; b = t[1]; c = t[2]",
        "a, b = t[0], t[1]; c = t[2]",
        "a = t; b = t; c = t",
        "a, b, c = (t)"
        ],
        "answer": "a = t[0]; b = t[1]; c = t[2]",
        "discription":"Tuple unpacking assigns each element of the tuple to the respective variable."
            

    },

    {
        "id": 16,
        "question":"Given the following code, what is the output?\nt = (1, (2, 3), 4)\nprint(t[1][1])",
        
        "options": ["2",
        "3",
        "(2,3)",
        "4"
        ],
        "answer": "3",
        "discription":"t[1] accesses the sub-tuple (2, 3), and [1] accesses the second element of that sub-tuple."
            

    },

    {
        "id": 17,
        "question":"What will be the result of this operation?\nt = (1, 2, (3, 4), [5, 6])\nt[3].append(7)\nprint(t)",
        
        "options": ["(1, 2, (3, 4), [5, 6, 7])",
        "(1, 2, (3, 4), [5, 6])",
        "TypeError",
        "(1, 2, (3, 4), [5, 6, 7])"
        ],
        "answer": "(1, 2, (3, 4), [5, 6, 7])",
        "discription":"Tuples are immutable, but their elements can be mutable, like lists inside tuples."
            

    },

    {
        "id": 18,
        "question":"What will be the result of this code snippet?\nt1 = (2, 4)\nt2 = (3, 6)\nresult = tuple(a * b for a, b in zip(t1, t2))\nprint(result)",
        
        "options": ["(6, 24)",
        "(6, 12)",
        "(2, 4, 3, 6)",
        "(2, 4, 6, 12)"
        ],
        "answer": "(6, 12)",
        "discription":"The zip() function pairs elements from t1 and t2, and the multiplication a * b is applied to each pair, resulting in (2*3, 4*6)."
            

    },

    {
        "id": 19,
        "question":"Given the tuple t = ((1, 2), (2, 1), (3, 4), (4, 3)), how can you extract only the symmetric tuples?",
        
        "options": ["tuple(t[i] for i in range(len(t)) if t[i] == t[i][::-1])",
        "tuple(x for x in t if x == x[::-1])",
        "tuple(x for x in t if x[0] == x[1])",
        "tuple(x for x in t if x == (x[1], x[0]))"
        ],
        "answer": "tuple(x for x in t if x == x[::-1])",
        "discription":"Symmetric tuples are those where reversing the tuple yields the same tuple. For (1, 2) and (2, 1), only tuples that are equal to their reversed counterparts are symmetric."
            

    },

    {
        "id": 20,
        "question":"Given the tuple t = (1, (2, (3, 4)), 5), how can you remove all nested tuples and keep only the non-nested elements?",
        
        "options": ["tuple(x for x in t if not isinstance(x, tuple))",
        "tuple(x for x in t if isinstance(x, tuple))",
        "tuple(x for sub in t for x in (sub if isinstance(sub, tuple) else [sub]))",
        "tuple(x for x in t if type(x) != tuple)"
        ],
        "answer": "tuple(x for x in t if not isinstance(x, tuple))",
        "discription":"This approach filters out all elements that are instances of tuple, leaving only the non-nested elements."
            

    }

]