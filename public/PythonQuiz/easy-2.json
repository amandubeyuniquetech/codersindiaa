[
    {
        "id": 1,
        "question":"Write a short program that prints the numbers 1 to 10 using a for loop.\nThen write an equivalent program that prints the numbers 1 to 10 using a while loop.",
                                                                                                        
        
        "optionsText":[],
        "optionsCode":["for i in range(1, 11):\n    print(i)\n i = 1\n while i < 11:\n    print(i)\n    i += 1",
        "for i in range(10):\n    print(i + 1)\n i = 0\n while i < 10:\n    print(i)\n    i += 1",
        "for i in range(1, 10):\n    print(i)\n i = 1\n while i <= 10:\n    print(i)\n    i += 1",
        "for i in range(0, 10):\n    print(i + 1)\n i = 1\n while i < 10:\n    print(i)\n    i += 1"],
        "answer":"for i in range(1, 11):\n    print(i)\n i = 1\n while i < 11:\n    print(i)\n    i += 1",
        "discription":"The for loop in option A correctly uses range(1, 11) to print numbers from 1 to 10.\nThe while loop in option A correctly initializes i to 1 and continues to print until i reaches 10, incrementing i by 1 each time."
    },

    {
        "id": 2,
        "question":"What statement creates a function?",
        "optionsCode":[],                                                                 
        "optionsText":["create function",
        "function()",
        "def",
        "func"
        ],
        "answer":"def",
        "discription":"The def keyword is used to define a function in Python"
    },

    {
        "id": 3,
        "question":"What is the data type of None?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["str",
        "int",
        "NoneType",
        "bool"
        ],
        "answer":"NoneType",
        "discription":"In Python, None is a special constant that represents the absence of a value or a null value. The data type of None is NoneType."
    },

    {
        "id": 4,
        "question":"What exactly is []?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["An empty tuple",
        "An empty dictionary",
        "An empty set",
        "An empty list"
        ],
        "answer":"An empty list",
        "discription":"In Python, [] represents an empty list. Lists are mutable sequences, typically used to store collections of homogeneous items."
    },

    {
        "id": 5,
        "question":"In a list of values stored in a variable called spam, how would you assign the value 'hello' as the third value? (Assume [2, 4, 6, 8, 10] are in spam.)",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["spam[2] = 'hello'",
        "spam[3] = 'hello'",
        "spam[1] = 'hello'",
        "spam.insert(3, 'hello')"
        ],
        "answer":"spam[2] = 'hello'",
        "discription":"Lists in Python are zero-indexed, meaning the first element is at index 0. To assign a new value to the third position (which is index 2), you use spam[2] = 'hello'."
    },

    {
        "id": 6,
        "question":"What is the value of spam[-1] if spam is a list?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["The first element of the list",
        "The last element of the list",
        "The middle element of the list",
        "An error occurs"
        ],
        "answer":"The last element of the list",
        "discription":"In Python, negative indexing is used to access elements from the end of a list. spam[-1] refers to the last element of the list."
    },

    {
        "id": 7,
        "question":"What is the difference between the list methods append() and insert()?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["append() adds an element to the beginning of the list, while insert() adds an element to the end of the list.",
        "append() adds an element to the end of the list, while insert() adds an element at a specified position in the list.",
        "append() adds an element to the end of the list, while insert() removes an element from a specified position in the list.",
        "append() and insert() are both used to add elements to the list, but insert() can only be used with strings."
        ],
        "answer":"append() adds an element to the end of the list,\nwhile insert() adds an element at a specified position in the list.",
        "discription":"The append() method adds a new element to the end of the list.\nThe insert() method adds a new element at a specified index in the list."
    },

    {
        "id": 8,
        "question":"What's the difference between tuples and lists in Python?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["Tuples are mutable, while lists are immutable",
        "Tuples can contain only one data type, while lists can contain multiple data types.",
        "Tuples are created using parentheses, while lists are created using square brackets.",
        "Tuples support more methods than lists."
        ],
        "answer":"Tuples are created using parentheses, while lists are created using square brackets.",
        "discription":"The main difference between tuples and lists is that tuples are created using parentheses () and are immutable, meaning their elements cannot be changed after creation. Lists are created using square brackets [] and are mutable, meaning their elements can be changed."
    },

    {
        "id": 9,
        "question":"How do you type a tuple value that only contains the integer 42?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["(42)",
        "42,",
        "(42,)",
        "[42]"
        ],
        "answer":"(42,)",
        "discription":"To create a tuple with a single element, you need to include a comma after the element inside parentheses. (42,) is the correct syntax to create a tuple containing only the integer 42. (42) would be interpreted as just the integer 42, not a tuple."
    },

    {
        "id": 10,
        "question":"What does an empty dictionary's code look like in Python?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["[]",
        "{}",
        "()",
        "{:}"
        ],
        "answer":"{}",
        "discription":"An empty dictionary in Python is represented by a pair of curly braces {}."
    },

    {
        "id": 11,
        "question":"What is the most significant distinction between a dictionary and a list in Python?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["Lists are ordered, while dictionaries are unordered.",
        "Lists are immutable, while dictionaries are mutable.",
        "Lists can store multiple data types, while dictionaries can only store strings.",
        "Lists use indices to access elements, while dictionaries use keys."
        ],
        "answer":"Lists use indices to access elements, while dictionaries use keys.",
        "discription":"The most significant distinction between a list and a dictionary in Python is that lists use indices to access elements, whereas dictionaries use keys. Lists are ordered collections accessed by their position, while dictionaries are collections of key-value pairs accessed by keys."
    },

    {
        "id": 12,
        "question":"How do you write a string of newlines in Python if you don't want to use the \n character?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["Use multiple spaces between the lines.",
        "Use a triple-quoted string (''').",
        "Use the newline() function.",
        "Use a semicolon (;) between the lines."
        ],
        "answer":"Use a triple-quoted string (''').",
        "discription":"In Python, triple-quoted strings (''') can span multiple lines, allowing you to include newlines directly in the string without needing to use the \n escape character. This is useful for writing multi-line strings."
    },

    {
        "id": 13,
        "question":"How do you distinguish between inputInt() and inputFloat()?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["inputInt() accepts only integer values, while inputFloat() accepts only floating-point numbers.",
        "inputInt() accepts both integer and floating-point values, while inputFloat() only accepts integer values.",
        "inputInt() is used to validate string inputs, while inputFloat() validates integer inputs.",
        "inputInt() accepts any numeric value, whereas inputFloat() accepts only string inputs."
        ],
        "answer":"inputInt() accepts only integer values, while inputFloat() accepts only floating-point numbers.",
        "discription":"The inputInt() function is used to get and validate integer inputs, ensuring the input is a whole number. In contrast, inputFloat() is used to get and validate floating-point inputs, allowing for decimal numbers."
    },

    {
        "id": 14,
        "question":"If a blank input is entered three times, what does inputStr(limit=3) do?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["It allows the user to try entering a non-blank input again, without any restrictions.",
        "It raises an error after three attempts and does not accept any further input.",
        "It automatically accepts the third blank input without any restrictions.",
        "It ignores the input and continues to prompt for a non-blank input indefinitely."
        ],
        "answer":"It raises an error after three attempts and does not accept any further input.",
        "discription":"The limit parameter in inputStr(limit=3) specifies the maximum number of attempts allowed. If the user enters a blank input three times, the function raises an error and does not allow further attempts."
    },

    {
        "id": 15,
        "question":"If blank input is entered three times, what does inputStr(limit=3, default='hello') do?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["It raises an error after three attempts and does not accept any further input.",
        "It returns 'hello' after three blank inputs are entered.",
        "It continues to prompt for input indefinitely until a non-blank input is provided.",
        "It accepts the third blank input without any restrictions and ignores the default value."
        ],
        "answer":"It returns 'hello' after three blank inputs are entered.",
        "discription":"When inputStr is used with limit=3 and default='hello', it allows up to three attempts. If all attempts are blank, it returns the default value 'hello'."
    },

    {
        "id": 16,
        "question":"What integers represent the levels of headings available in Word documents?",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["0, 1, 2, 3, 4, 5, 6",
        "1, 2, 3, 4, 5, 6, 7",
        "1, 2, 3, 4, 5, 6",
        "0, 1, 2, 3, 4, 5"
        ],
        "answer":"1, 2, 3, 4, 5, 6",
        "discription":"Headings in Word documents are typically represented by integers from 1 to 6, indicating the level of the heading."
    },

    {
        "id": 17,
        "question":"How many seconds are in an hour? Use the interactive interpreter as a calculator and multiply the number of seconds in a minute (60) by the number of minutes in an hour (also 60)",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["3,600",
        "3,000",
        "1,800",
        "6,000"
        ],
        "answer":"3,600",
        "discription":"There are 60 seconds in a minute and 60 minutes in an hour. Multiplying these numbers (60 × 60) gives 3,600 seconds in an hour"
    },

    {
        "id": 18,
        "question":"Divide seconds_per_day by seconds_per_hour. Use floating-point (/) division.",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["result = seconds_per_day / seconds_per_hour",
        "result = seconds_per_day // seconds_per_hour",
        "result = seconds_per_day % seconds_per_hour",
        "result = seconds_per_day * seconds_per_hour"
        ],
        "answer":"result = seconds_per_day / seconds_per_hour",
        "discription":"To perform floating-point division of seconds_per_day by seconds_per_hour, use the / operator, which provides a floating-point result."
    },

    {
        "id": 19,
        "question":"How do you create a list called years_list, starting with the year of your birth and including each subsequent year until the year of your fifth birthday? For example, if you were born in 1980, the list would be [1980, 1981, 1982, 1983, 1984, 1985].",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["years_list = [year for year in range(1980, 1986)]",
        "years_list = [1980, 1981, 1982, 1983, 1984]",
        "years_list = list(range(1980, 1985))",
        "years_list = list(range(1980, 1986))"
        ],
        "answer":"years_list = list(range(1980, 1986))",
        "discription":"To create a list called years_list that starts with your birth year and ends with the year of your fifth birthday, use list(range(birth_year, birth_year + 6)), where birth_year is the year you were born. This includes all years from your birth year up to and including your fifth birthday."
    },

    {
        "id": 20,
        "question":"In which year in years_list was your third birthday? Remember, you were 0 years of age for your first year.",
        "optionsCode":[],   
                                                                                                        
        "optionsText":["The first year in years_list",
        "The second year in years_list",
        "The third year in years_list",
        "The fourth year in years_list"
        ],
        "answer":"The fourth year in years_list",
        "discription":"Since you were 0 years old in your first year, your third birthday would occur in the fourth year of the years_list."
    }


]